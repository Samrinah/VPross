Component,Verilog Code
AND gate 1-bit,"module and_gate(input a, b, output y); assign y = a & b; endmodule"
AND gate N-bit,"module and_gate #(parameter N=8)(input [N-1:0] a, b, output [N-1:0] y); assign y = a & b; endmodule"
OR gate 1-bit,"module or_gate(input a, b, output y); assign y = a | b; endmodule"
OR gate N-bit,"module or_gate #(parameter N=8)(input [N-1:0] a, b, output [N-1:0] y); assign y = a | b; endmodule"
NOT gate 1-bit,"module not_gate(input a, output y); assign y = ~a; endmodule"
NOT gate N-bit,"module not_gate #(parameter N=8)(input [N-1:0] a, output [N-1:0] y); assign y = ~a; endmodule"
NAND gate 1-bit,"module nand_gate(input a, b, output y); assign y = ~(a & b); endmodule"
NAND gate N-bit,"module nand_gate #(parameter N=8)(input [N-1:0] a, b, output [N-1:0] y); assign y = ~(a & b); endmodule"
NOR gate 1-bit,"module nor_gate(input a, b, output y); assign y = ~(a | b); endmodule"
NOR gate N-bit,"module nor_gate #(parameter N=8)(input [N-1:0] a, b, output [N-1:0] y); assign y = ~(a | b); endmodule"
XOR gate 1-bit,"module xor_gate(input a, b, output y); assign y = a ^ b; endmodule"
XOR gate N-bit,"module xor_gate #(parameter N=8)(input [N-1:0] a, b, output [N-1:0] y); assign y = a ^ b; endmodule"
XNOR gate 1-bit,"module xnor_gate(input a, b, output y); assign y = ~(a ^ b); endmodule"
XNOR gate N-bit,"module xnor_gate #(parameter N=8)(input [N-1:0] a, b, output [N-1:0] y); assign y = ~(a ^ b); endmodule"
Multiplexer 2 to 1,"module mux_2to1(input a, b, sel, output y); assign y = sel ? b : a; endmodule"
Multiplexer 4 to 1 1-bit,"module mux_4to1(input [3:0] in, input [1:0] sel, output y); assign y = in[sel]; endmodule"
Multiplexer 8 to 1 1-bit,"module mux_8to1(input [7:0] in, input [2:0] sel, output y); assign y = in[sel]; endmodule"
Multiplexer 16 to 1 1-bit,"module mux_16to1(input [15:0] in, input [3:0] sel, output y); assign y = in[sel]; endmodule"
Multiplexer 4 to 1 4-bit,"module mux_4to1_4bit(input [3:0][3:0] in, input [1:0] sel, output [3:0] y); assign y = in[sel]; endmodule"
Demultiplexer 1 to 2 1-bit,"module demux_1to2(input a, input sel, output [1:0] y); assign y = sel ? {a, 1'b0} : {1'b0, a}; endmodule"
Demultiplexer 1 to 4 1-bit,"module demux_1to4(input a, input [1:0] sel, output [3:0] y); assign y = (sel == 2'b00) ? {3'b000, a} : (sel == 2'b01) ? {2'b00, a, 1'b0} : (sel == 2'b10) ? {1'b0, a, 2'b00} : {a, 3'b000}; endmodule"
Demultiplexer 1 to 8 1-bit,"module demux_1to8(input a, input [2:0] sel, output [7:0] y); assign y = (1 << sel) * a; endmodule"
Encoder 4 to 2,"module encoder_4to2(input [3:0] in, output [1:0] y); assign y = in[1] ? 2'b01 : in[2] ? 2'b10 : in[3] ? 2'b11 : 2'b00; endmodule"
Encoder 8 to 3,"module encoder_8to3(input [7:0] in, output [2:0] y); assign y = in[1] ? 3'b001 : in[2] ? 3'b010 : in[3] ? 3'b011 : in[4] ? 3'b100 : in[5] ? 3'b101 : in[6] ? 3'b110 : in[7] ? 3'b111 : 3'b000; endmodule"
Priority Encoder 8 to 3,"module priority_encoder_8to3(input [7:0] in, output [2:0] y); assign y = in[7] ? 3'b111 : in[6] ? 3'b110 : in[5] ? 3'b101 : in[4] ? 3'b100 : in[3] ? 3'b011 : in[2] ? 3'b010 : in[1] ? 3'b001 : 3'b000; endmodule"
Decoder 2 to 4,"module decoder_2to4(input [1:0] in, output [3:0] y); assign y = 1 << in; endmodule"
Decoder 3 to 8,"module decoder_3to8(input [2:0] in, output [7:0] y); assign y = 1 << in; endmodule"
Binary to Gray Converter 4-bit,"module bin2gray_4bit(input [3:0] bin, output [3:0] gray); assign gray = bin ^ (bin >> 1); endmodule"
Gray to Binary Converter 4-bit,"module gray2bin_4bit(input [3:0] gray, output [3:0] bin); assign bin = gray ^ (gray >> 1) ^ (gray >> 2) ^ (gray >> 3); endmodule"
Comparator 1-bit,"module comparator_1bit(input a, b, output eq, gt, lt); assign eq = (a == b); assign gt = (a > b); assign lt = (a < b); endmodule"
Comparator 4-bit,"module comparator_4bit(input [3:0] a, b, output eq, gt, lt); assign eq = (a == b); assign gt = (a > b); assign lt = (a < b); endmodule"
Half Adder 1-bit,"module half_adder(input a, b, output sum, cout); assign sum = a ^ b; assign cout = a & b; endmodule"
Full Adder 1-bit,"module full_adder(input a, b, cin, output sum, cout); assign sum = a ^ b ^ cin; assign cout = (a & b) | (b & cin) | (a & cin); endmodule"
Ripple Carry Adder 4-bit,"module rca_4bit(input [3:0] a, b, input cin, output [3:0] sum, output cout); wire [3:0] c; full_adder fa0(a[0], b[0], cin, sum[0], c[0]); full_adder fa1(a[1], b[1], c[0], sum[1], c[1]); full_adder fa2(a[2], b[2], c[1], sum[2], c[2]); full_adder fa3(a[3], b[3], c[2], sum[3], cout); endmodule"
Carry Lookahead Adder 4-bit,"module cla_4bit(input [3:0] a, b, input cin, output [3:0] sum, output cout); wire [3:0] g, p; wire [4:0] c; assign g = a & b; assign p = a ^ b; assign c[0] = cin; assign c[1] = g[0] | (p[0] & c[0]); assign c[2] = g[1] | (p[1] & g[0]) | (p[1] & p[0] & c[0]); assign c[3] = g[2] | (p[2] & g[1]) | (p[2] & p[1] & g[0]) | (p[2] & p[1] & p[0] & c[0]); assign c[4] = g[3] | (p[3] & g[2]) | (p[3] & p[2] & g[1]) | (p[3] & p[2] & p[1] & g[0]) | (p[3] & p[2] & p[1] & p[0] & c[0]); assign sum = p ^ c[3:0]; assign cout = c[4]; endmodule"
SR Latch 1-bit,"module sr_latch(input s, r, output q, qn); nor(qn, s, q); nor(q, r, qn); endmodule"
D Flip-Flop 1-bit,"module d_ff(input clk, d, output reg q); always @(posedge clk) q <= d; endmodule"
JK Flip-Flop 1-bit,"module jk_ff(input clk, j, k, output reg q); always @(posedge clk) q <= (j & ~q) | (~k & q); endmodule"
Register 4-bit,"module reg_4bit(input clk, input [3:0] d, output reg [3:0] q); always @(posedge clk) q <= d; endmodule"
Shift Register SISO 4-bit,"module siso_4bit(input clk, si, output so); reg [3:0] q; always @(posedge clk) q <= {q[2:0], si}; assign so = q[3]; endmodule"
Synchronous Counter 4-bit,"module sync_counter_4bit(input clk, rst, output reg [3:0] q); always @(posedge clk or posedge rst) if (rst) q <= 4'b0; else q <= q + 1; endmodule"
RAM 8x8-bit,"module ram_8x8(input clk, we, input [2:0] addr, input [7:0] din, output [7:0] dout); reg [7:0] mem [0:7]; always @(posedge clk) if (we) mem[addr] <= din; assign dout = mem[addr]; endmodule"
Tri-state Buffer 8-bit,"module tri_buf_8bit(input oe, input [7:0] a, output [7:0] y); assign y = oe ? a : 8'bz; endmodule"
DAC 8-bit,"module dac_8bit(input [7:0] din, output real vout); assign vout = (din * 3.3) / 255; endmodule"
ADC 8-bit,"module adc_8bit(input real vin, output [7:0] dout); assign dout = (vin * 255) / 3.3; endmodule"



